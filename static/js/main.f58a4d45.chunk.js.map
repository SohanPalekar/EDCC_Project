{"version":3,"sources":["utils.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["AQITablePM25","concentrations","min","max","index","calcPM25","AQI","breakpoints","find","conc","undefined","Error","getBreakpoints","PM_min","PM_max","AQI_min","App","props","state","hours","cigs","warning","this","parseInt","Number","isNaN","setState","e","console","log","cigsLegible","toFixed","className","Header","as","Container","Input","fluid","label","value","onChange","currentTarget","Button","primary","onClick","AQI2cigs","id","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f58a4d45.chunk.js","sourcesContent":["// pulled from page 11 of https://www.epa.gov/sites/production/files/2014-05/documents/zell-aqi.pdf\nconst AQITablePM25 = {\n  concentrations: [\n    {\n      min: 0,\n      max: 15.5,\n      index: {\n        min: 0,\n        max: 50\n      }\n    },\n    {\n      min: 15.5,\n      max: 40.5,\n      index: {\n        min: 50,\n        max: 100\n      }\n    },\n    {\n      min: 40.5,\n      max: 65.5,\n      index: {\n        min: 100,\n        max: 150\n      }\n    },\n    {\n      min: 65.5,\n      max: 150.5,\n      index: {\n        min: 150,\n        max: 200\n      }\n    },\n    {\n      min: 150.5,\n      max: 250.5,\n      index: {\n        min: 200,\n        max: 300\n      }\n    },\n    {\n      min: 250.5,\n      max: 500.5,\n      index: {\n        min: 300,\n        max: 400\n      }\n    },\n    {\n      min: 500.5,\n      max: 99999999999, // yea I know\n      index: {\n        min: 400,\n        max: 99999999999\n      }\n    }\n  ]\n}\n\n/** Get the upper and lower bounds of particle concentration for corresponding AQI */\nfunction getBreakpoints (AQI: number) {\n  const breakpoints = AQITablePM25.concentrations.find(function (conc) {\n    if (conc.index.min <= AQI && conc.index.max > AQI) {\n      return conc\n    }\n  })\n  if (breakpoints === undefined) {\n    throw new Error(`AQI out of bounds. AQI: ${AQI}`)\n  }\n  return breakpoints\n}\n\n/** Calculate PM 2.5 concentration per 24 hours based on AQI */\nfunction calcPM25 (AQI: number) {\n\n  const breakpoints = getBreakpoints(AQI)\n  // particle concentration\n  const PM_min = breakpoints.min\n  const PM_max = breakpoints.max\n  // air quality index\n  const AQI_min = breakpoints.index.min\n  const AQI_max = breakpoints.index.max\n\n  // particle concentration based on given AQI\n  // this equation is based on the one used here: https://www.airnow.gov/aqi/aqi-calculator/\n  const PM = ((AQI - AQI_min) / (AQI_max - AQI_min)) * (PM_max - PM_min) + PM_min\n\n  return PM\n}\n\nexport { calcPM25 }","import React from 'react'\nimport './App.css'\nimport { calcPM25 } from './utils'\nimport { Container, Header, Input, Button } from 'semantic-ui-react'\n\nclass App extends React.Component<\n  {},\n  { AQI: any; hours: any; cigs: number; warning: string }\n> {\n  constructor(props: any) {\n    super(props)\n\n    this.state = {\n      AQI: '',\n      hours: 24,\n      cigs: 0,\n      warning: ''\n    }\n  }\n\n  AQI2cigs() {\n    let { AQI, hours } = this.state\n\n    try {\n      AQI = parseInt(AQI)\n      hours = Number(hours)\n\n      if (isNaN(AQI)) {\n        this.setState({\n          warning:\n            'AQI must be a number from 0 to 1000. Please no letters or symbols.'\n        })\n        return\n      }\n      if (isNaN(hours)) {\n        this.setState({\n          warning: 'Number of hours must be a number. Please no letters or symbols.'\n        })\n        return\n      }\n    } catch (e) {\n      console.log(e)\n      this.setState({ warning: \"That's not a real number! Please try again.\" })\n      return\n    }\n\n    const PM24h = calcPM25(AQI)\n    const particlesPerCigPerHours = 22\n    const cigs = (PM24h / particlesPerCigPerHours / 24) * hours\n\n    this.setState({ cigs, warning: '' })\n  }\n\n  render() {\n    const { AQI, hours, cigs, warning } = this.state\n    const cigsLegible = cigs.toFixed(2)\n\n    return (\n      <div className='App'>\n        <Header as='h1'>AQI to Cigarettes Calculator</Header>\n        <p>\n          Input the Air Quality Index (AQI) where you live and how many hours\n          you've been exposed. The calculator will tell you what the impact to\n          your health is in cigarettes.\n        </p>\n\n        <Container className='max-200'>\n          <Input\n            fluid\n            label='AQI'\n            value={AQI}\n            onChange={e => this.setState({ AQI: e.currentTarget.value })}\n          />\n          <br />\n          <Input\n            fluid\n            label='Hours Exposed'\n            value={hours}\n            onChange={e => this.setState({ hours: e.currentTarget.value })}\n          />\n          <br />\n          <Button primary onClick={() => this.AQI2cigs()}>Calculate</Button>\n          <br />\n          <p>It's like you've smoked:</p>\n          <Header as='h2'>{cigsLegible} cigarettes</Header>\n\n          <p className='red'>{warning}</p>\n\n          <div id='info'>\n            <hr />\n            <Header>How does this work?</Header>\n            <p>\n              <b>Step 1:</b> Converts AQI to PM2.5 using EPAâ€™s AQI equation.  \n              <br />\n              <b>Step 2:</b> Estimates how many cigarettes this equates to, based on published studies.\n            </p>\n            <i>\n              Source: <a href='http://berkeleyearth.org/archive/air-pollution-and-cigarette-equivalence/'>Berkeley Earth</a>\n            </i>\n          </div>\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}